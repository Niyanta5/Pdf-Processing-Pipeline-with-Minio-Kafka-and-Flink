version: '3.8'

services:
  zookeeper:
    image: wurstmeister/zookeeper
    platform: linux/amd64
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - app-network

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CREATE_TOPICS: "minio-events:1:1"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_LOG_RETENTION_HOURS: "24"
      KAFKA_HEAP_OPTS: "-Xmx512M -Xms512M"
      KAFKA_ZOOKEEPER_CONNECTION_TIMEOUT_MS: 60000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  minio-server:
    image: minio/minio
    container_name: minio-server
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-data:/data
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: admin@123
      MINIO_NOTIFY_KAFKA_ENABLE: "on"
      MINIO_NOTIFY_KAFKA_BROKERS: "kafka:9092"
      MINIO_NOTIFY_KAFKA_TOPIC: "minio-events"
      MINIO_NOTIFY_KAFKA_COMMENT: "kafka1"
    command: server /data --console-address ":9001"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 30s

  pdf-generator:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: pdf-generator
    command: python scripts/pdfgeneration.py
    volumes:
      - ./data:/app/data
    networks:
      - app-network
    depends_on:
      - kafka
      - minio-server

  minio-watcher:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: minio-watcher
    depends_on:
      kafka:
        condition: service_healthy
      minio-server:
        condition: service_healthy
    command: python scripts/miniowatcher.py
    volumes:
      - ./data:/app/data
    environment:
      MINIO_SERVER_URL: http://minio-server:9000
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: admin@123
      BUCKET_NAME: mybucket
      WATCH_DIRECTORY: /app/data
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_TOPIC: minio-events
    networks:
      - app-network

  kafka-producer:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: kafka-producer
    depends_on:
      kafka:
        condition: service_healthy
      minio-server:
        condition: service_healthy
    command: python scripts/miniotokafka.py
    environment:
      MINIO_SERVER_URL: http://minio-server:9000
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: admin@123
      BUCKET_NAME: mybucket
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_TOPIC: minio-events
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep miniotokafka.py | grep -v grep || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    depends_on:
      - kafka
    ports:
      - "9100:9000"
    environment:
      KAFKA_BROKERCONNECT: kafka:9092
      JVM_OPTS: "-Xms32M -Xmx64M"
    networks:
      - app-network

  minio-notification-setup:
    image: minio/mc
    container_name: minio-notification-setup
    depends_on:
      kafka:
        condition: service_healthy
      minio-server:
        condition: service_healthy
    entrypoint: ["/bin/sh", "-c"]
    command: |
      echo 'Waiting for services to be ready...'
      sleep 10
      mc alias set myminio http://minio-server:9000 admin admin@123
      mc mb --ignore-existing myminio/mybucket
      mc admin config set myminio notify_kafka:1 brokers=kafka:9092 topic=minio-events
      mc admin service restart myminio
      echo 'Waiting for MinIO to restart...'
      sleep 15
      mc event add myminio/mybucket arn:minio:sqs::1:kafka --event put,delete,get
      mc event list myminio/mybucket
      echo 'MinIO notification setup complete!'
      exit 0
    networks:
      - app-network

  kafka-consumer:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: kafka-consumer
    depends_on:
      kafka:
        condition: service_healthy
      minio-server:
        condition: service_healthy
    command: python -u scripts/kafka_consumer.py
    environment:
      MINIO_SERVER_URL: http://minio-server:9000
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: admin@123
      BUCKET_NAME: mybucket
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_TOPIC: minio-events
      KAFKA_GROUP_ID: minio-metadata-consumer
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep kafka_consumer.py | grep -v grep || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  jobmanager:
    image: apache/flink:1.18
    container_name: jobmanager
    ports:
      - "8081:8081"
    command: jobmanager
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jobmanager
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        state.backend: filesystem
        state.checkpoints.dir: file:///flink-checkpoints
    volumes:
      - flink-checkpoints:/flink-checkpoints
    networks:
      - app-network

  taskmanager:
    image: apache/flink:1.18
    container_name: taskmanager
    depends_on:
      - jobmanager
    command: taskmanager
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jobmanager
      - |
        FLINK_PROPERTIES=
        taskmanager.numberOfTaskSlots: 2
        state.backend: filesystem
        state.checkpoints.dir: file:///flink-checkpoints
    volumes:
      - flink-checkpoints:/flink-checkpoints
    networks:
      - app-network

  flink-job:
    build:
      context: .
      dockerfile: Dockerfile.flink
    container_name: flink-job
    depends_on:
      - jobmanager
      - taskmanager
      - kafka
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  minio-data:
  flink-checkpoints:
